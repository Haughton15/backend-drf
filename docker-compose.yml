version: '3.8'
name: backend-drf

services:
  db:
    image: postgres:16.2-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    networks:
      - backend-drf-networks
    volumes:
      - postgres_data:/var/lib/postgresql/data

  web:
    build:
      context: .
    env_file:
      - .env
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      PYTHONUNBUFFERED: 1
      DJANGO_DEBUG: ${DJANGO_DEBUG}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend-drf-networks
    restart: unless-stopped

  pg_admin:
    image: dpage/pgadmin4
    env_file:
      - .env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8888:80"
    depends_on:
      - db
    networks:
      - backend-drf-networks

volumes:
  postgres_data:

networks:
  backend-drf-networks:
